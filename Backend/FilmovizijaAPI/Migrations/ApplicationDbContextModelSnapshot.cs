// <auto-generated />
using System;
using FilmovizijaAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace FilmovizijaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmovizijaAPI.Entities.Bioskop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Point>("Lokacija")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Bioskopi");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzlaska")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrikazujeSe")
                        .HasColumnType("bit");

                    b.Property<string>("Rezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filmovi");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviBioskopi", b =>
                {
                    b.Property<int>("BioskopId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.HasKey("BioskopId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmoviBioskopi");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviGlumci", b =>
                {
                    b.Property<int>("GlumacId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("Redosled")
                        .HasColumnType("int");

                    b.Property<string>("Uloga")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("GlumacId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmoviGlumci");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviZanrovi", b =>
                {
                    b.Property<int>("ZanrId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.HasKey("ZanrId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmoviZanrovi");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.Glumac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImePrezime")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Glumci");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.Zanr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Zanrovi");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviBioskopi", b =>
                {
                    b.HasOne("FilmovizijaAPI.Entities.Bioskop", "Bioskop")
                        .WithMany()
                        .HasForeignKey("BioskopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmovizijaAPI.Entities.Film", "Film")
                        .WithMany("FilmoviBioskopi")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bioskop");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviGlumci", b =>
                {
                    b.HasOne("FilmovizijaAPI.Entities.Film", "Film")
                        .WithMany("FilmoviGlumci")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmovizijaAPI.Entities.Glumac", "Glumac")
                        .WithMany()
                        .HasForeignKey("GlumacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Glumac");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.FilmoviZanrovi", b =>
                {
                    b.HasOne("FilmovizijaAPI.Entities.Film", "Film")
                        .WithMany("FilmoviZanrovi")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmovizijaAPI.Entities.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("FilmovizijaAPI.Entities.Film", b =>
                {
                    b.Navigation("FilmoviBioskopi");

                    b.Navigation("FilmoviGlumci");

                    b.Navigation("FilmoviZanrovi");
                });
#pragma warning restore 612, 618
        }
    }
}
